mutate(
across(c(gender, smoking_history, hypertension, heart_disease, diabetes), as_factor)) %>%
mutate(
across(.cols = where(is.numeric), .fns = remove_outliers
)) %>%
filter(
if_any(where(is.numeric), \(col) !is.na(col)))
# Clean and filter the data
remove_outliers <- function(col) {
col_min <- min(col, na.rm = TRUE)
col_max <- max(col, na.rm = TRUE)
lower_bound <- col_min + 0.01 * (col_max - col_min)
upper_bound <- col_max - 0.01 * (col_max - col_min)
col[!(col >= lower_bound & col <= upper_bound)] <- NA  # Replace outliers with NA
return(col)
}
data %>%
mutate(across(c(gender, smoking_history, hypertension, heart_disease, diabetes), as_factor)) %>%
mutate(across(.cols = where(is.numeric), .fns = remove_outliers)) %>%
filter(if_any(where(is.numeric), \(col) !is.na(col)))
data %>%
mutate(across(c(gender, smoking_history, hypertension, heart_disease, diabetes), as_factor)) %>%
mutate(across(.cols = where(is.numeric), .fns = remove_outliers)) %>%
filter(if_all(where(is.numeric), \(col) !is.na(col)))
normalize_features <- function(col) {
col_min <- min(col, na.rm = TRUE)
col_max <- max(col, na.rm = TRUE)
return((col - col_min) / (col_max - col_min))
}
data %>%
mutate(across(c(gender, smoking_history, hypertension, heart_disease, diabetes), as_factor),
across(.cols = where(is.numeric), .fns = remove_outliers)) %>%
filter(if_all(where(is.numeric), \(col) !is.na(col))) %>%
mutate(across(where(is.numeric), normalize_features))
cleaned_data <- data %>%
mutate(across(c(gender, smoking_history, hypertension, heart_disease, diabetes), as_factor),
across(where(is.numeric), remove_outliers)) %>%
filter(if_all(where(is.numeric), \(col) !is.na(col))) %>%
mutate(across(where(is.numeric), normalize_features))
cleaned_data
training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
training <- cleaned_data[training_idx, ]
testing <- cleaned_data[-training_idx, ]
glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
predict(glm_fit, newdata = testing, type = "resp")
glm_pred <- rep("No", nrow(testing))
glm_pred[predictions > 0.5] = "Yes"
glm_pred
unique(glm_pred)
table(glm_pred)
testing == glm_pred
sum(testing == glm_pred) / length(testing)
glm_pred <- rep("Yes", nrow(testing))
glm_pred[predictions > 0.5] = "No"
table(glm_pred)
mean(glm_pred == testing)
glm_pred <- rep("Yes", nrow(testing))
glm_pred[predictions < 0.5] = "No"
table(glm_pred)
mean(glm_pred == testing)
testing
mean(glm_pred == testing$diabetes)
set.seed(123)
training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
training <- cleaned_data[training_idx, ]
testing <- cleaned_data[-training_idx, ]
glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
predictions <- predict(glm_fit, newdata = testing, type = "response")
glm_pred <- rep("No", nrow(testing))
glm_pred[predictions > 0.5] = "Yes"
table(glm_pred)
mean(glm_pred == testing$diabetes)
# train and testing set and develop the model
# logit function: it's Classification problem and
glm_pred == testing$diabetes
continuous <- select(cleaned_data, is.numeric)
continuous <- cleaned_data %>%
select(where(is.numeric))
summary(continuous)
continuous <- data %>%
select(where(is.numeric))
summary(continuous)
continuous <- cleaned_data %>%
select(where(is.numeric))
summary(continuous)
ggplot(continuous, aes(x = hours.per.week)) +
geom_density(alpha = .2, fill = "#FF6666")
ggplot(continuous, aes(x = blood_glucose_level)) +
geom_density(alpha = .2, fill = "#FF6666")
top_one_percent <- quantile(cleaned_data$blood_glucose_level, 0.99)
drop_blood_glucose_level <- cleaned_data %>%
filter(blood_glucose_level < top_one_percent)
# Clean and filter the data
remove_outliers <- function(col) {
top_one_percent <- quantile(col, 0.99)
col[col >= top_one_percent] <- NA  # Replace outliers with NA
return(col)
}
normalize_features <- function(col) {
col_min <- min(col, na.rm = TRUE)
col_max <- max(col, na.rm = TRUE)
return((col - col_min) / (col_max - col_min))
}
cleaned_data <- data %>%
mutate(across(c(gender, smoking_history, hypertension, heart_disease, diabetes), as_factor),
across(where(is.numeric), remove_outliers)) %>%
filter(if_all(where(is.numeric), \(col) !is.na(col))) %>%
mutate(across(where(is.numeric), normalize_features))
cleaned_data
continuous <- data %>%
select(where(is.numeric))
summary(continuous)
summary(continuous)
# Upload the code pacakges here
library(tidyverse)
data <- read_csv("diabetes_prediction_dataset.csv")
head(data)
---
title: "Untitled"
---
title: "Untitled"
---
title: "Untitled"
print("fucking hate this class!")
continuous <- data %>%
select(where(is.numeric))
summary(continuous)
continuous <- cleaned_data %>%
select(where(is.numeric))
summary(continuous)
graph <- lapply(names(factor),
function(x)
ggplot(factor, aes(c(age,hypertension, heart_disease, bmi,  HbA1c_level, blood_glucose_level )) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)))
graph <- lapply(names(factor),
function(x)
ggplot(factor, aes(get(x))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)))
graph <- lapply(names(factor),
function(x)
ggplot(factor, aes(get(x))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)))
graph
graph <- lapply(names(blood_glucose_level)),
graph <- lapply(names(blood_glucose_level),
function(x)
ggplot(factor, aes(get(x))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)))
graph <- lapply(names(cleaned_data$blood_glucose_level),
function(x)
ggplot(factor, aes(get(x))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)))
graph
cleaned_data %>%
pivot_longer(cols = where(is.factor), names_to = "variable", values_to = "values")
cleaned_data %>%
select(where(is.factor))
cleaned_data %>%
select(where(is.factor)) %>%
distinct()
cleaned_data %>%
select(where(is.factor)) %>%
summarise(distinct())
cleaned_data %>%
select(where(is.factor)) %>%
summarise(n_distinct())
summarise(n_distinct
cleaned_data %>%
cleaned_data %>%
summarize(across(where(is.factor), n_distinct)))
cleaned_data %>%
summarize(across(where(is.factor), n_distinct)))
cleaned_data %>%
summarize(across(where(is.factor), n_distinct))
cleaned_data %>%
summarize(across(where(is.factor), n_distinct)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "count")
cleaned_data %>%
summarize(across(where(is.factor), n_distinct)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "count") %>%
ggplot(aes(y = count)) +
geom_bar(stat = "identity")
cleaned_data %>%
summarize(across(where(is.factor), n_distinct)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "count") %>%
ggplot(aes(x = variable)) +
geom_bar(stat = "identity")
cleaned_data %>%
summarize(across(where(is.factor), n_distinct)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "count") %>%
ggplot(aes(x = variable, y = count)) +
geom_bar(stat = "identity")
unique(cleaned_data$smoking_history)
sum(cleaned_data$smoking_history == "ever")
cleaned_data %>%
count(smoking_history)
cleaned_data %>%
count(diabetes)
cleaned_data %>%
count(smoking_history)
cleaned_data %>%
count(smoking_history)
cleaned_data %>%
count(diabetes)
cleaned_data %>%
count(diabetes) %>%
ggplot(aes(x = diabetes, y = n))+
geom_bar(stat = "identity")
cleaned_data %>%
count(diabetes) %>%
ggplot(aes(x = diabetes, y = n))+
geom_bar(stat = "identity")
ggplot(recast_data, aes(x = diabetes, fill = bmi)) +
geom_bar(position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
ggplot(cleaned_data, aes(x = diabetes, fill = bmi)) +
geom_bar(position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
ggplot(cleaned_data, aes(x = diabetes, fill = hypertension)) +
geom_bar(position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
ggplot(cleaned_data, aes(x = diabetes, fill = hypertension)) +
geom_bar(position = "fill") +
theme_bw()
ggplot(cleaned_data, aes(x = diabetes, fill = hypertension)) +
geom_bar(position = "dodge") +
theme_bw()
ggplot(cleaned_data, aes(x = diabetes, fill = smoking_history)) +
geom_bar(position = "dodge") +
theme_bw()
ggplot(cleaned_data, aes(x = diabetes, fill = smoking_history)) +
geom_bar(position = "dodge") +
scale_y_log10()+
theme_bw()
ggplot(cleaned_data, aes(x = diabetes, fill = smoking_history)) +
geom_bar(position = "dodge") +
theme_bw()
ggplot(cleaned_data, aes(x = diabetes, fill = gender)) +
geom_bar(position = "dodge") +
theme_bw()
ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
geom_bar(position = "dodge") +
theme_bw()
library(GGally)
ggpairs(cleaned_data)
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
ggpairs(cleaned_data)
ggpairs(mtcars)
library(GGally)
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
mtcars %>%
ggpairs()
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 1000) %>%
ggpairs()
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs()
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(diag = "blankDiag", upper = list(continuous = "points"))
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(diag = "blankDiag", upper = list(continuous = "points"))[, 9]
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(diag = "blankDiag", upper = list(continuous = "points"))[9]
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(diag = "blankDiag", upper = list(continuous = "points"))[9, 9]
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(diag = "blankDiag", upper = list(continuous = "points"))
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(c(ncol(cleaned_data), 1:(ncol(cleaned_data)-1)), diag = "blankDiag", upper = list(continuous = "points"))
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(columns = ncol(cleaned_data), diag = "blankDiag", upper = list(continuous = "points"))
#| fig-width: 10
#| fig-height: 10
# ggplot(cleaned_data, aes(x = diabetes, fill = heart_disease)) +
#   geom_bar(position = "dodge") +
#   theme_bw()
cleaned_data %>%
sample_n(size = 100) %>%
ggpairs(columns = 1:ncol(cleaned_data), diag = "blankDiag", upper = list(continuous = "points"))
ggpairs(mtcars, columns = c(ncol(mtcars), 1:(ncol(mtcars)-1)))
mean(glm_pred == as.character(testing$diabetes))
set.seed(12)
training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
training <- cleaned_data[training_idx, ]
testing <- cleaned_data[-training_idx, ]
glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
predictions <- predict(glm_fit, newdata = testing, type = "response")
glm_pred <- rep("No", nrow(testing))
glm_pred[predictions > 0.5] = "Yes"
table(glm_pred)
mean(glm_pred == as.character(testing$diabetes))
# train and testing set and develop the model
# logit function: it's Classification problem and
set.seed(1)
training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
training <- cleaned_data[training_idx, ]
testing <- cleaned_data[-training_idx, ]
glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
predictions <- predict(glm_fit, newdata = testing, type = "response")
glm_pred <- rep("No", nrow(testing))
glm_pred[predictions > 0.5] = "Yes"
table(glm_pred)
mean(glm_pred == as.character(testing$diabetes))
# train and testing set and develop the model
# logit function: it's Classification problem and
seq(6)
# set.seed(1)
# training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
# training <- cleaned_data[training_idx, ]
# testing <- cleaned_data[-training_idx, ]
#
# glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
# predictions <- predict(glm_fit, newdata = testing, type = "response")
# glm_pred <- rep("No", nrow(testing))
# glm_pred[predictions > 0.5] = "Yes"
#
# table(glm_pred)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
mean(glm_pred == as.character(testing$diabetes))
}
}
data_train <- create_train_test(recast_data, 0.8, train = TRUE)
# set.seed(1)
# training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
# training <- cleaned_data[training_idx, ]
# testing <- cleaned_data[-training_idx, ]
#
# glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
# predictions <- predict(glm_fit, newdata = testing, type = "response")
# glm_pred <- rep("No", nrow(testing))
# glm_pred[predictions > 0.5] = "Yes"
#
# table(glm_pred)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
mean(glm_pred == as.character(testing$diabetes))
}
}
data_train <- create_train_test(cleaned_data, 0.8, train = TRUE)
data_test <- create_train_test(cleaned_data, 0.8, train = FALSE)
dim(data_train)
# train and testing set and develop the model
# logit function: it's Classification problem and
glm_fit <- glm(diabetes ~ ., data = data_train, family = binomial())
predictions <- predict(glm_fit, newdata = data_test, type = "response")
table(glm_pred)
table(glm_pred, data_test$diabetes)
table(glm_pred)
mean(glm_pred == as.character(testing$diabetes))
glm_fit <- glm(diabetes ~ ., data = data_train, family = "binomial")
glm_fit <- glm(diabetes ~ ., data = data_train, family = "binomial")
predictions <- predict(glm_fit, newdata = data_test, type = "response")
glm_pred <- rep("No", nrow(data_test))
glm_pred[predictions > 0.5] = "Yes"
table(glm_pred)
mean(glm_pred == as.character(testing$diabetes))
mean(glm_pred == testing$diabetes)
mean(glm_pred == data_test$diabetes)
# set.seed(1)
# training_idx <- sample(seq_len(nrow(cleaned_data)), size = 0.7 * nrow(cleaned_data))
# training <- cleaned_data[training_idx, ]
# testing <- cleaned_data[-training_idx, ]
#
# glm_fit <- glm(diabetes ~ ., data = training, family = binomial())
# predictions <- predict(glm_fit, newdata = testing, type = "response")
# glm_pred <- rep("No", nrow(testing))
# glm_pred[predictions > 0.5] = "Yes"
#
# table(glm_pred)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
mean(glm_pred == as.character(testing$diabetes))
}
}
data_train <- create_train_test(cleaned_data, 0.7, train = TRUE)
data_test <- create_train_test(cleaned_data, 0.7, train = FALSE)
dim(data_train)
# train and testing set and develop the model
# logit function: it's Classification problem and
glm_fit <- glm(diabetes ~ ., data = data_train, family = "binomial")
predictions <- predict(glm_fit, newdata = data_test, type = "response")
glm_pred <- rep("No", nrow(data_test))
glm_pred[predictions > 0.5] = "Yes"
table(glm_pred)
mean(glm_pred == data_test$diabetes)
table(data_test$diabetes)
ble(glm_pred)
table(glm_pred)
table(data_test$diabetes)
mean(glm_pred == data_test$diabetes)
glm_pred <- rep("0", nrow(data_test))
glm_pred[predictions > 0.5] = "1"
table(glm_pred)
table(data_test$diabetes)
mean(glm_pred == data_test$diabetes)
library(broom)
tidy(glm_fit)
summary(glm_fit)
table(glm_pred, data_test$diabetes)
summary(glm_fit)$null.deviance
summary(glm_fit)$deviance
anova(glm_fit, test = "Chisq")
table(glm_pred, data_test$diabetes)
coef(glm_fit)
logLik(glm_fit)
bic_value <- BIC(glm_fit)
print(paste("BIC:", bic_value))
null_model <- glm(diabetes ~ 1, data = data_train, family = "binomial")
# Check the summary of the null model
summary(null_model)
summary(glm_fit)$null.deviance
null_model <- glm(diabetes ~ 1, data = data_train, family = "binomial")
# Check the summary of the null model
summary(null_model)
summary(glm_fit)
anova(null_model, glm_fit, test = "Chisq")
null_logLik <- logLik(null_model)
full_logLik <- logLik(glm_fit)
# McFadden's Pseudo R-squared
pseudo_r2 <- 1 - (as.numeric(full_logLik) / as.numeric(null_logLik))
print(paste("Pseudo R-squared:", pseudo_r2))
# model Accuracy
mean(glm_pred == data_test$diabetes)
ggplot(continuous, aes(x = blood_glucose_level)) +
geom_density(alpha = .2, fill = "#FF6666")
# model Accuracy
mean(glm_pred == data_test$diabetes)
# model Accuracy of the NULL
mean(null_model == data_test$diabetes)
